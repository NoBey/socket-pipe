// Generated by CoffeeScript 1.10.0
(function() {
  var Net, TClient,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Net = require('net');

  TClient = require('./tclient');

  module.exports = (function(superClass) {
    extend(_Class, superClass);

    function _Class(localAddress, remoteAddress, transfer) {
      this.localAddress = localAddress;
      this.remoteAddress = remoteAddress;
      this.transfer = transfer;
      this.createDaemonSocket();
      this.hash = null;
    }

    _Class.prototype.createDaemonSocket = function() {
      var first, ping, tmp;
      ping = Buffer.from([0]);
      if (this.transfer != null) {
        console.log(this.transfer);
        tmp = new Buffer(this.transfer);
        first = new Buffer(1 + tmp.length);
        first.writeInt8(1, 0);
        tmp.copy(first, 1);
      } else {
        first = Buffer.from([1]);
      }
      this.daemonSocket = this.connectRemote((function(_this) {
        return function() {
          var connected;
          connected = false;
          _this.daemonSocket.ref();
          _this.daemonSocket.on('data', function(data) {
            var url, uuid;
            if (!connected) {
              connected = true;
              _this.hash = data;
              url = data.toString('utf8');
              return console.info("url " + url);
            } else if (data.length === 4) {
              uuid = data.readInt32LE(0);
              console.info("request pipe " + uuid);
              return _this.createTunnel(uuid);
            }
          });
          _this.daemonSocket.write(first);
          return setInterval(function() {
            return _this.daemonSocket.write(ping);
          }, 10000);
        };
      })(this));
      return this.daemonSocket.on('close', (function(_this) {
        return function() {
          return setTimeout(function() {
            return _this.createDaemonSocket();
          }, 1000);
        };
      })(this));
    };

    _Class.prototype.createTunnel = function(uuid) {
      var ping, socket;
      ping = new Buffer(5 + this.hash.length);
      ping.writeInt8(2, 0);
      ping.writeInt32LE(uuid, 1);
      this.hash.copy(ping, 5);
      return socket = this.connectRemote((function(_this) {
        return function() {
          var local;
          console.info("connect remote " + uuid);
          return local = _this.connectLocal(function() {
            console.info("connect local " + uuid);
            socket.write(ping);
            socket.pipe(local).pipe(socket);
            return console.info("piped " + uuid);
          });
        };
      })(this));
    };

    return _Class;

  })(TClient);

}).call(this);
