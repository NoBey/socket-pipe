// Generated by CoffeeScript 1.12.2
(function() {
  var Crypto, Transform,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Transform = (require('stream')).Transform;

  Crypto = require('crypto');

  module.exports = (function(superClass) {
    extend(_Class, superClass);

    function _Class() {
      return _Class.__super__.constructor.apply(this, arguments);
    }

    _Class.prototype.initDecipher = function(cipher, password) {
      this.decipher = Crypto.createDecipher(cipher, password);
      this.received = false;
      this.packet = null;
      return this.last = null;
    };

    _Class.prototype._transform = function(buff, enc, callback) {
      var e, end, length, newBuff;
      try {
        if (this.last != null) {
          newBuff = new Buffer(this.last.length + buff.length);
          this.last.copy(newBuff, 0);
          buff.copy(newBuff, this.last.length);
          buff = newBuff;
          this.last = null;
        }
        if (!this.received) {
          length = buff.readInt32LE(0);
          console.info("new packet " + length);
          this.packet = new Buffer(length);
          this.offset = 0;
        }
        end = Math.min(buff.length - 1, 3 + this.packet.length - this.offset);
        console.info("end with " + end);
        buff.copy(this.packet, this.offset, 4, end);
        this.received = !(end <= buff.length - 1);
        this.offset += end - 3;
        if (end < buff.length - 1) {
          this.last = buff.slice(end + 1);
        }
        if (!this.received) {
          return callback(null, this.decipher.update(this.packet));
        }
      } catch (error) {
        e = error;
        return callback(e, null);
      }
    };

    return _Class;

  })(Transform);

}).call(this);
