// Generated by CoffeeScript 1.12.2
(function() {
  var Transform, pregQuote,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Transform = (require('stream')).Transform;

  pregQuote = function(str) {
    return str.replace(/[-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, "\\$&");
  };

  module.exports = (function(superClass) {
    extend(_Class, superClass);

    function _Class() {
      this.filtered = false;
      this.piped = false;
      this.buffers = [];
      _Class.__super__.constructor.apply(this, arguments);
    }

    _Class.prototype.setCallback = function(cb) {
      this.cb = cb;
    };

    _Class.prototype.setFrom = function(from) {
      return this.from = new RegExp(pregQuote(from), 'ig');
    };

    _Class.prototype.setTo = function(to) {
      this.to = to;
    };

    _Class.prototype.pipe = function(stream) {
      this.stream = stream;
      this.piped = true;
      return _Class.__super__.pipe.apply(this, arguments);
    };

    _Class.prototype.release = function() {
      var buffer, results;
      if (this.stream != null) {
        results = [];
        while (buffer = this.buffers.shift()) {
          results.push(this.stream.write(buffer));
        }
        return results;
      }
    };

    _Class.prototype.callback = function(err, buff) {
      if (this.piped) {
        return _Class.__super__.callback.apply(this, arguments);
      } else {
        return this.buffers.push(buff);
      }
    };

    _Class.prototype._transform = function(buff, enc, callback) {
      var body, head, matches, pos, str;
      if (!this.filtered) {
        str = enc === 'buffer' ? buff.toString('binary') : buff;
        pos = str.indexOf("\r\n\r\n");
        if (pos >= 0) {
          this.filtered = true;
          head = str.substring(0, pos);
          body = str.substring(pos);
        } else {
          head = str;
          body = '';
        }
        if ((this.from != null) && (this.to != null)) {
          head = head.replace(this.from, this.to);
        }
        if (matches = head.match(/host:\s*([^\r]+)/i)) {
          if (this.cb != null) {
            head = this.cb(matches[1], head);
          }
        }
        callback(null, Buffer.from(head + body, 'binary'));
      } else {
        callback(null, buff);
      }
      if ((buff.indexOf(-1)) >= 0) {
        return this.clear();
      }
    };

    _Class.prototype.clear = function() {
      this.filtered = false;
      return this.buffers = [];
    };

    return _Class;

  })(Transform);

}).call(this);
