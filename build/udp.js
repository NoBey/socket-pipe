// Generated by CoffeeScript 1.10.0
(function() {
  var Udp;

  Udp = require('dgram');

  module.exports = (function() {
    function _Class(localAddress, remoteAddress) {
      this.localAddress = localAddress;
      this.remoteAddress = remoteAddress;
      this.connectionPool = [];
      setInterval(function() {
        var connect, i, index, j, k, len, now, ref, results;
        now = Date.now();
        index = 0;
        for (j = 0, len = connectionPool.length; j < len; j++) {
          connect = connectionPool[j];
          if (now - connect.time < 5000) {
            break;
          }
          index += 1;
        }
        results = [];
        for (i = k = 0, ref = index - 1; 0 <= ref ? k <= ref : k >= ref; i = 0 <= ref ? ++k : --k) {
          connect = connectionPool.shift();
          results.push(connect.socket.close());
        }
        return results;
      }, 3000);
      this.createServer();
    }

    _Class.prototype.createServer = function() {
      var receiver;
      receiver = Udp.createSocket('udp' + this.localAddress.type);
      receiver.bind(this.localAddress.port, this.localAddress.ip);
      receiver.ref();
      receiver.on('error', console.error);
      return receive.on('message', (function(_this) {
        return function(data, info) {
          var client, sender;
          sender = _this.requestUdpSocket();
          client = info;
          sender.on('message', function(data, info) {
            console.log("response " + info.address + ":" + info.port);
            return receiver.send(data, 0, data.length, client.port, client.address);
          });
          console.log("request " + client.address + ":" + client.port);
          return sender.send(data, 0, data.length, _this.requestUdpSocket(_this.remoteAddress.port), _this.remoteAddress.ip);
        };
      })(this));
    };

    _Class.prototype.requestUdpSocket = function() {
      var now, socket;
      now = Date.now();
      socket = Udp.createSocket('udp' + this.remoteAddress.type);
      socket.bind();
      socket.on('error', console.error);
      connectionPool.push({
        time: now,
        socket: socket
      });
      return socket;
    };

    _Class.prototype.requestUdpPort = function(port) {
      if (port instanceof Array) {
        return port[0] + Math.floor(Math.random() * (port[1] - port[0] + 1));
      } else {
        return port;
      }
    };

    return _Class;

  })();

}).call(this);
